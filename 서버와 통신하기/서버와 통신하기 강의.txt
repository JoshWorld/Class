<1>
안드로이드에서 서버와 통신하는 방법을 배워봅시다.
이 ppt에서는 안드로이드에서 사용하는 통신방법에는 무엇이 있는지, 실제 개발에 사용되는 것은 무엇인지, 어떻게 사용하는지 배워보겠습니다.

<2>
안드로이드에서 서버와 통신하는 방법은 크게 두가지가 있습니다.
하나는 HTTP 통신,
하나는 Socket 통신이 있습니다.
HTTP 통신이란 URL 접속을 통해서 데이터를 읽어오는 방식,
Socket 통신이란 Socket 객체에 데이터를 담아서 통신하는 방식이며 IP와 PORT번호가 일치해야 통신이 가능합니다.
우리는 주로 HTTP 통신을 통해서 서버와 통신하게 됩니다.
왜냐하면 Socket 통신은 계속 연결을 유지하는 통신이기 때문에 우리는 필요할때마다 연결 요청을 할 수  있는 HTTP 통신을 사용합니다.

<3>
그럼 이제 HTTP 통신에 대해 알아봅시다.
대부분의 HTTP 통신은 REST API를 사용하게 됩니다.
여기서 API란 다른사람이 쓴 코드를 사용할 수 있는 라이브러리 + 설명서 + 설계도라고 생각하면 됩니다.
REST란 HTTP 메소드를 통해서 데이터에 대해서 CRUD Operation을 적용하는것을 의미합니다.
쉽게 말하자면 데이터를 보내고 받는 방식의 규칙을 말한다고 보면 됩니다.

그래서 REST API란 서버에서 만든 API를 안드로이드에서 쓸 수 있도록 REST 규칙을 사용해서 데이터를 통신할 수 있게 해주는 것을 의미합니다.
REST 규칙이 무엇인지 알아봐야하겠죠
CRUD를 적용한다고 했었는데 CRUD란 Create, Read, Update, Delete의 앞글자들을 따서 부르는 용어입니다.
Create를 할때는 HTTP의 POST 메소드를,
Read를 할떄는 HTTP의 GET,
Update를 할때는 PUT,
Delete를 할때는 DELETE를 사용하게 됩니다.

<4>
그럼 실제로 이와같은 REST API를 사용하려면 어떻게 해야할까요?
보통은 API 문서라는것이 존재합니다.
API문서에는 다음과 같이 가이드라인이 존재합니다.
그래서 가이드라인을 따라하다보면 쉽게 개발을 할 수 있습니다.
보통 네이버, 카카오 등 제공하는 데이터의 규모가 클수록 가이드라인이 자세히 나와있으니 개발하는데 어렵지는 않을겁니다.

<5>
그렇다면 우리가 받고싶은 데이터를 API가 제공하지 않는다면 어떻게 해야할까요?
직접 API를 만들어야겠죠?

그렇다면 실제 개발할때 직접 만든 API는 어떻게 통신하게될까요?
직접 만든 API는 보통 서버개발자가 문서를 작성해줍니다. 그럼 서버개발자가 제공한 REST API 문서에따라 만들면 통신이 됩니다.
아래 그림은 실제로 인터페이스 앱을 만들때 사용한 REST API의 문서중 일부입니다.

<6>
실제 개발에서 HTTP 통신은 어떻게 할까요?

안드로이드에서는 여러가지 방법이 있지만 현업에서는 가장 많이 Retrofit이라는 라이브러리를 사용합니다.
Retrofit은 안드로이드에서 통신하던 방법이던 HttpUrlConnection의 복잡한 연결 작업들을 편리하게 도와주는 라이브러리입니다.

<7>
그럼 사용법을 알아봅시다
먼저 안드로이드 스튜디오에서 왼쪽하단에 있는 build.gradle(Module:~)에 dependency를 추가합니다.

<8>
그 다음 API 문서에서 주어진대로 HTTP API를 인터페이스에 만듭니다.
Retrofit은 Interface에 만들어진 코드를 HTTP API로 전환해줍니다.

우리는 Retrofit 가이드에 나와있는것을 봅시다.

일단 우리는 빨간줄친 부분만 기억해놓읍시다. Retrofit에서 사용할 Url을 지정하는 메소드가 baseUrl 메소드입니다. 파라미터로 연결하고자 하는 url을 설정하는 곳입니다.
여기서는 github api를 사용합니다.

<9>
주소에 맞춰서 들어가보면 api정보가 나와있습니다. 왼쪽에는 해당 url이 무엇을 의미하는지 적혀있고 오른쪽에는 해당 정보를 불러오는 url이 적혀있습니다.
밑줄쳐진 user_url로 들어가봅시다. url 주소의 맨 마지막 부분에 {user}를 자신의 아이디로 바꾸면 됩니다.

<10>
들어가보면 다음과같이 자신의 깃허브 아이디에 관한 정보들이 쭉 나오게 됩니다. 데이터가 이런식으로 나오는 방식이 바로 Json 형식입니다.
key값과 value 값으로 이루어진 데이터 객체를 전달하기위해 사용하는 포맷입니다. 앞으로 우리는 이 Json 형식으로 앞으로 데이터를 보내고 받을겁니다.

<11>
자 그럼 Retrofit으로 돌아와서 Retrofit의 문법들을 한번 봅시다.

Retrofit에서 사용하는 서버와 통신하기 위한 메소드는 GET, POST, DELETE, PUT을 지원합니다
그리고 어노테이션 안에있는것은 URL에 들어갈 값입니다. 아까 본 baseUrl의 뒷부분에 어노테이션 안에있는 값들을 덧붙여서 요청을 보내게 됩니다.

<12>
다음을 봅시다. URL을 다루는 방법입니다.
우리가 위에 github api를 사용할때 user부분을 아이디로 바꾸면 해당 아이디에 대한 정보가 나왔죠? 마찬가지로 Retrofit에서도 동적으로 url을 바꿀 수 있습니다.
이를 위해서 메소드 매개변수를 사용하고 바꿀 부분을 {}로 감싸서 정의해줍니다. 그리고 이에 대응하는 값을 @Path에 매개변수값을 명시해주어야 합니다.

<13>
쿼리 매개변수도 가능합니다. 쿼리는 예시를 통해 알아봅시다.

path로 groupId, query로 sort가 주어지면 어떻게 URL이 구성되는지 봅시다.
groupId에 1, sort에 jkey20값이 들어가면 다음과 같이 URL이 구성됩니다.
만약에 query가 여러개면 어떻게 될까요?
쿼리에 name과 star가 추가되었다고 생각해봅시다.
각각 값은 제 이름과 20이 들어가있으면 어떻게 URL이 구성될까요?
다음과 같이 &로 처리됩니다.
Query를 사용하면 user, name, star의 순서에 상관없이 데이터를 조회할 수 있다는 것도 알아두세요!

<14>
다음은 서버에 데이터를 보낼 때 어떻게 보내는지 알아봅시다.
우리가 서버에 데이터를 보낼때 필요한게 무엇이 있을까요?
일단 서버에서 받는다는것을 인지하게 해줄만한 무언가가 필요하겠고 데이터를 보내기 위한 URL이 필요할 것이고 전송할 데이터가 필요하겠죠?
이 3가지를 예시를 통해서 알아봅시다.
먼저 서버에서 받는다는것을 인지하게 해주려면 어떻게 해야할까요? 앞에서 Retrofit에서 사용하는 메소드들이 무엇이 있다고 했었죠?
GET, POST, DELETE, PUT을 지원한다고 했었죠?
우리는 서버에 데이터를 보내니까 서버에 보낸다라는 것을 알려줘야하므로 POST를 사용해서 알려줍니다.
그 다음 데이터를 보내기위한 URL은 문서에서 제공하겠죠? 여기서는 /users/new url에서 처리하는것 같네요.
그 다음 전송할 데이터를 어떻게 보낼까요? 메소드 뒤에 매개변수로 @Body 어노테이션을 사용해서 보내고싶은 객체를 지정해줍니다.
여기선 User 객체를 지정해줬으니 데이터가 들어갈때 User 객체로 준 값이 들어가겠네요.

<15>
그런데 우리는 데이터를 Json으로 받고 보낸다고 했죠? 이 객체가 그대로 들어가면 안되니까 설정을 해주어야합니다.
그래서 java 객체를 Json으로 변경해주는 Gson을 사용할겁니다. 그래서 처음 빨간색 밑줄쳐진 라이브러리를 추가한 뒤
다음 빨간색 밑줄의 설명을 보면 Gson을 역직렬화가 가능하게~ 라고 써져있죠? 역직렬화가 바로 데이터를 객체로 바꾸는 것입니다. 그럼 직렬화는 반대로 객체를 데이터로 바꾸는 것이겠죠?
자 그 다음 GsonConver~ 클래스를 통해 컨버터를 추가한다고 하네요.
그럼 예제를 봅시다. 기존 Retrofit에 addConver~ 메소드를 통해서 컨버터를 추가했네요. 이렇게 되면 어떻게 달라진다? 객체를 보낼때 역직렬화를 자동으로 해준다!

자 그럼 여기까지 Retrofit의 대략적인 사용방법을 알아봤습니다. 이제 실제로 안드로이드 스튜디오에서 서버와 통신을 해봅시다.

<16>
프로젝트 명을 RetrofitTest라고 짓고 프로젝트를 시작해봅시다.
제일 먼저 해줘야할것이 무엇이였죠? 라이브러리 추가를 하는것이였죠? 
우리는 CRUD를 모두 다 해봐야하므로 Gson 컨버터를 사용할 수 있게 Gson 컨버터 라이브러리도 추가해줍시다.
추가해주고 나서 서버 api 문서로 가서 어떤식으로 Retrofit을 이용할지 생각해보도록 합니다.

<17>
우리가 사용할 서버는 인터페이스 앱에서 사용할 공지사항을 통신하는 부분을 사용해볼것입니다.
다음은 서버 api에 적혀있는 사항입니다.
ppt에선 작게 표시되어있지만 첨부파일에 있으니 크게 보시길 바랍니다.
먼저 baseUrl은 다음과 같습니다.

<18><19>
그 다음 본격적으로 문서를 보면 우리가 받는 값은 공지사항의 제목과 내용이고 추가할때 제목과 내용, 수정과 삭제할때 id가 필요하네요?
그럼 xml에서 공지사항을 불러와 표시해줄 RecyclerView와 추가할때 제목과 내용을 입력할 EditText, 수정과 삭제할때 입력할 id를 받을 수 있는 EditText, 공지사항 조회, 수정, 삭제, 추가를 실행할 버튼이 필요하겠네요.

<20>
그럼 xml 텍스트 문서에서 적혀져있는 텍스트를 복사해서 붙여넣기 해봅시다. 다음과같이 화면이 표시되나요?
그 다음 MainActivity 클래스로 가서 기능들을 추가해봅시다.


<21>
MainActivity 텍스트 문서에 적혀져있는 텍스트를 복사해서 붙여넣기를 합시다. 먼저 조회기능부터 만들어봅시다. 조회기능은 recyclerview를 사용하니까 Adapter와 adapter에 사용되는 xml먼저 만들어야겠죠? Adapter는 RecyclerAdapter 코드, xml은 recycler_notice.xml 텍스트 코드에 있으니 복사 붙여넣기를 합니다.
붙여넣으면 Notice 부분에 빨간줄이 생길텐데 이 Notice도 텍스트파일에서 붙여넣읍시다. 그럼 다음과 같이 생성되어있는지 확인하세요.

<22>
자 다음은 Retrofit을 활용해서 데이터를 받아봅시다.
Retrofit 객체를 생성하고 baseUrl을 지정한 뒤 Retrofit이 사용할 인터페이스를 만들어줍니다. 여기선 APIService라는 인터페이스를 만들어봅시다.
API 문서에 적혀있는 URL이 나와있고 받는값을 확인해보면 Notice 객체를 리스트형식으로 여러개 던져줌을 알 수 있습니다. 그럼 ArrayList<Notice>로 받으면 되겠죠?

그래서 Call뒤에 ArrayList<Notice>를 써주고 findAll 메소드로 불러온다고 합시다. 그 뒤에 매개변수에는 url에 동적으로 줄 값도 없고 받는것 작업을 하니까 따로 보내줄것도 없으니 뒤에 아무것도 안써도 되겠죠?

<23>
자 그럼 다시 MainActivity로 와봅시다. 
이제 Retrofit에 인터페이스를 연결시키고 데이터를 받아봅시다.

Retrofit 객체를 생성하고 Gson 컨버터를 붙여주고 baseUrl을 다음과 같이 설정합니다.
그리고 생성한 APIService 인터페이스를 retrofit에 붙여줍니다.
그다음 버튼을 누를때 조회를 해야한다고 했으니까 조회버튼에 온클릭 리스너를 붙여서 누를때조회하게 해줘야겠죠?
버튼이 눌리면 인터페이스의 findAll메소드를 실행시켜서 데이터를 받아오게됩니다. 여기서 enqueue 메소드를 사용하여 비동기로 데이터 요청을 보냅니다
그리고 Response가 돌아오면 콜백으로 앱에게 알려 데이터를 받을 수 있게 해줍니다.
응답받은 Response는 onResponse에 response의 body메소드를 사용해서 우리가 원하는 배열 데이터로 바꿔줍니다. 받은 배열은 리사이클러뷰의 어댑터에 배열로 바꿔주면 ui에 반영되면서 다음과 같이 나오게됩니다.

