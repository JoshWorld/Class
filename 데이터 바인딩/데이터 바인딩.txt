<1>
이번에는 데이터 바인딩에서 배워봅시다.
데이터 바인딩이란 무엇이고 어떻게 쓰이는지 알아봅시다.

<2>
데이터 바인딩이란 xml에 Data를 Binding(연결)해서 사용할 수 있게 도와주는 기능입니다.
데이터를 UI 요소에 연결하기 위한 코드를 최소화 할 수 있어서 주로 MVP 혹은 MVVM 패턴을 구현할때 주로 사용됩니다.



<3>
데이터 바인딩의 장점은 다음과 같습니다.
1. findViewById()를 호출하지 않아도 된다.
findViewById를 호출하지 않아도 됨으로써 View를 UI에 연결하기 위한 수많은 코드들을 줄여줍니다.
2. RecyclerView의 item을 자동으로 설정
RecyclerView의 각각의 아이템을 설정하는 작업이 자동으로 진행됩니다.
3. Data 변경시 자동으로 View 변경
4. xml 파일만으로도 view에 들어가는 데이터를 모두 파악할 수 있다.

<4>
다음은 사용법을 배워봅시다.
먼저 build.gradle(Module:~)파일로 들어가서 다음과 같이 노란색 네모안에 있는 코드를 추가해줍니다.

<5>
그 다음 DataBinding을 사용할 레이아웃으로 가서 DataBinding을 적용시켜봅시다.
DataBinding을 레이아웃에 적용시킬때는 다음과같이 <layout> 태그로 시작해야합니다.
activity_main.xml 파일로 가서 오른쪽과 같이 바꿔줍니다.
팁을 주자면 변경되어 있지 않은 상태(왼쪽)에서 최상위 레이아웃에서 alt + enter를 눌러 Conver to data binding layout을 선택하면 자동으로 레이아웃 오른쪽과 같이 바꿔줍니다.

이렇게 하면 자동으로 라이브러리에서 바인딩 클래스를 생성해줍니다.

<6>
그럼 생성된 바인딩 클래스를 이용해봅시다.
MainActivity.java 파일로 들어가서 setContentView를 지우고 다음과 같이 바꿉니다.
ActivityMainBinding이라는 객체는 생성된 바인딩 클래스입니다. 이 바인딩 클래스에 뷰를 설정해주는 과정을 우리는 방금 한겁니다.

<7>
그 다음 editText에 User(이름, 전화번호)데이터를 입력한대로 텍스트뷰를 바꿔주는 기능을 만들어봅시다.

User 객체를 다음과 같이 만들고 xml에서 다음과 같이 설정합니다.
User 객체를 xml상에서 <data>부분에 variable로 넣어주고 
@{} 구문을 사용해서 속성으로 정의한다.
@{user.name}은 xml에서 설정된 variable인 user의 name으로 설정하겠다는 것이다.

따라서 텍스트뷰 2개에는 user로 설정된 data값의 name과 phoneNumber를 설정해준다는 의미가 된다.

<8>
MainActivity에서 edittext의 값이 바뀔때마다 자동으로 textview의 텍스트가 바뀌게 설정해봅시다.
다음과 같이 binding.id값으로 findViewById없이 View를 사용할 수 있습니다. 그리고 binding.setUser는 xml에서 설정한 variable에 있는 user에 해당하는 set을 해준다는 의미입니다.
set 메소드는 자동으로 생성되는 것이고 variable의 이름에 맞춰서 바뀝니다 ex) name="example" -> binding.setExample()  
이렇게 되면 입력 텍스트가 바뀔때마다 user의 데이터값이 변경되고 데이터값을 xml에 전달해서 바뀌게 되겠죠?

여기까지 데이터 바인딩에 대해 알아보았습니다.